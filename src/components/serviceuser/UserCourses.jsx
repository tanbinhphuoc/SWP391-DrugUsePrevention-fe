"use client"

import { useState, useEffect } from "react"
import { useNavigate } from "react-router-dom"
import {
  Shield,
  Heart,
  BookOpen,
  Users,
  Target,
  Star,
  Clock,
  CheckCircle,
  PlayCircle,
  Search,
  ShieldCheck,
  Home,
  Bookmark,
  TrendingUp,
} from "lucide-react"

const UserCourses = () => {
  const navigate = useNavigate()
  const [search, setSearch] = useState("")
  const [allCourses, setAllCourses] = useState([])
  const [purchasedCourses, setPurchasedCourses] = useState([])
  const [loading, setLoading] = useState(false)
  const [userAge, setUserAge] = useState(null)
  const [filterPrice, setFilterPrice] = useState("all")
  const [notification, setNotification] = useState({ show: false, message: "", type: "" })

  const token = localStorage.getItem("token") || sessionStorage.getItem("tempToken")

  // Show notification function
  const showNotification = (message, type = "success") => {
    setNotification({ show: true, message, type })
    setTimeout(() => setNotification({ show: false, message: "", type: "" }), 3000)
  }

  // Check login and fetch profile
  useEffect(() => {
    if (!token) {
      showNotification("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p trang n√†y!", "error")
      navigate("/login", { replace: true })
      return
    }

    const fetchProfile = async () => {
      try {
        const response = await fetch("http://localhost:7092/api/Users/GetProfileMember", {
          headers: { Authorization: `Bearer ${token}` },
        })
        if (!response.ok) throw new Error("Failed to fetch profile")
        const data = await response.json()
        const dob = new Date(data.dateOfBirth)
        const today = new Date()
        let age = today.getFullYear() - dob.getFullYear()
        const monthDiff = today.getMonth() - dob.getMonth()
        if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < dob.getDate())) age--
        setUserAge(age)
      } catch (error) {
        showNotification("L·ªói t·∫£i th√¥ng tin ng∆∞·ªùi d√πng.", "error")
      }
    }

    fetchProfile()
  }, [token, navigate])

  // Fetch courses by age
  useEffect(() => {
    if (userAge !== null && token) {
      const fetchAllCourses = async () => {
        try {
          const response = await fetch(`http://localhost:7092/api/Course/GetCoursesByAge?age=${userAge}`, {
            headers: { Authorization: `Bearer ${token}` },
          })
          const data = await response.json()
          if (data.success) {
            setAllCourses(
              data.data.map((c) => ({
                id: c.courseID,
                name: c.courseName,
                description: c.description,
                price: c.price,
              })),
            )
            if (data.data.length === 0) {
              showNotification("Kh√¥ng c√≥ kh√≥a h·ªçc ph√π h·ª£p v·ªõi ƒë·ªô tu·ªïi c·ªßa b·∫°n.", "info")
            }
          }
        } catch (error) {
          showNotification("L·ªói t·∫£i kh√≥a h·ªçc.", "error")
        }
      }

      fetchAllCourses()
    }
  }, [token, userAge])

  // Fetch purchased courses
  useEffect(() => {
    if (token) {
      const fetchPurchasedCourses = async () => {
        try {
          const response = await fetch("http://localhost:7092/api/CourseRegistration/user", {
            headers: { Authorization: `Bearer ${token}` },
          })
          const data = await response.json()
          if (data.success) {
            setPurchasedCourses(
              data.data.map((p) => ({
                id: p.courseID,
                name: p.courseName,
                status: p.status || "FREE",
                progress: p.status === "CONFIRMED" ? "Ch∆∞a b·∫Øt ƒë·∫ßu" : p.paymentStatus || "Ho√†n t·∫•t",
              })),
            )
          }
        } catch (error) {
          showNotification("L·ªói t·∫£i kh√≥a h·ªçc ƒë√£ mua.", "error")
        }
      }

      fetchPurchasedCourses()
    }
  }, [token])

  const handlePurchase = async (courseId) => {
    if (!token) {
      showNotification("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ mua kh√≥a h·ªçc!", "error")
      navigate("/login", { replace: true })
      return
    }
    setLoading(true)
    try {
      const response = await fetch("http://localhost:7092/api/CourseRegistration/register", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ courseID: courseId }),
      })
      const data = await response.json()
      if (data.success) {
        if (data.paymentUrl) {
          window.location.href = data.paymentUrl
        } else {
          showNotification("ƒêƒÉng k√Ω kh√≥a h·ªçc mi·ªÖn ph√≠ th√†nh c√¥ng!")
          setPurchasedCourses((prev) => [
            ...prev,
            {
              id: courseId,
              name: allCourses.find((c) => c.id === courseId)?.name || "Kh√≥a h·ªçc",
              status: "FREE",
              progress: "Ch∆∞a b·∫Øt ƒë·∫ßu",
            },
          ])
        }
      } else {
        showNotification(data.message || "ƒêƒÉng k√Ω th·∫•t b·∫°i.", "error")
      }
    } catch (error) {
      showNotification("L·ªói ƒëƒÉng k√Ω kh√≥a h·ªçc.", "error")
    } finally {
      setLoading(false)
    }
  }

  const handleStartLearning = (courseId) => {
    if (!token) {
      showNotification("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ b·∫Øt ƒë·∫ßu h·ªçc!", "error")
      navigate("/login", { replace: true })
      return
    }
    navigate(`/courses/${courseId}/learn`)
  }

  const handleGoHome = () => navigate("/")

  const filteredAllCourses = allCourses.filter((course) => {
    const matchesSearch = course.name.toLowerCase().includes(search.toLowerCase())
    const matchesPrice =
      filterPrice === "all" ||
      (filterPrice === "free" && course.price === 0) ||
      (filterPrice === "paid" && course.price > 0)
    return matchesSearch && matchesPrice
  })

  const getStatusIcon = (status) => {
    switch (status) {
      case "CONFIRMED":
        return <CheckCircle className="w-5 h-5 text-green-500" />
      case "PENDING":
        return <Clock className="w-5 h-5 text-yellow-500" />
      case "FREE":
        return <ShieldCheck className="w-5 h-5 text-emerald-500" />
      default:
        return <Clock className="w-5 h-5 text-gray-500" />
    }
  }

  const EmptyStateIllustration = () => (
    <div className="flex flex-col items-center">
      <div className="relative">
        <div className="w-64 h-64 bg-gradient-to-br from-blue-100 via-indigo-100 to-purple-100 rounded-full flex items-center justify-center shadow-2xl">
          <div className="w-48 h-48 bg-gradient-to-br from-blue-200 via-indigo-200 to-purple-200 rounded-full flex items-center justify-center">
            <BookOpen className="w-24 h-24 text-blue-500" />
          </div>
        </div>
        <div className="absolute -top-4 -right-4 w-16 h-16 bg-gradient-to-r from-yellow-400 to-orange-400 rounded-full flex items-center justify-center shadow-lg animate-bounce">
          <Star className="w-8 h-8 text-white" />
        </div>
        <div className="absolute -bottom-4 -left-4 w-12 h-12 bg-gradient-to-r from-green-400 to-emerald-400 rounded-full flex items-center justify-center shadow-lg animate-pulse">
          <Shield className="w-6 h-6 text-white" />
        </div>
      </div>
    </div>
  )

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-blue-50 to-cyan-50 relative overflow-hidden">
      {/* Notification */}
      {notification.show && (
        <div
          className={`fixed top-4 right-4 z-50 px-6 py-3 rounded-lg shadow-lg transition-all duration-300 ${
            notification.type === "error" ? "bg-red-500 text-white" : "bg-green-500 text-white"
          }`}
        >
          {notification.message}
        </div>
      )}

      {/* Background decorative elements */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        <div className="absolute -top-40 -right-40 w-80 h-80 bg-gradient-to-br from-blue-200 to-indigo-200 rounded-full opacity-20 blur-3xl animate-pulse"></div>
        <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-gradient-to-br from-cyan-200 to-blue-200 rounded-full opacity-20 blur-3xl animate-pulse"></div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-gradient-to-br from-indigo-100 to-blue-100 rounded-full opacity-10 blur-3xl"></div>
      </div>

      <div className="max-w-7xl mx-auto px-6 py-8 relative z-10">
        {/* Header */}
        <div className="flex flex-col lg:flex-row items-center justify-between mb-8 gap-4">
          <button
            onClick={handleGoHome}
            className="group flex items-center space-x-3 px-6 py-3 bg-white/90 backdrop-blur-sm text-gray-700 rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 border border-gray-200 hover:border-blue-300"
          >
            <Home className="w-5 h-5 text-blue-600" />
            <span className="font-medium group-hover:text-blue-600 transition-colors">V·ªÅ trang ch·ªß</span>
          </button>
          <div className="flex items-center space-x-4">
            <div className="px-6 py-3 bg-gradient-to-r from-orange-400 via-red-400 to-pink-400 text-white rounded-2xl shadow-xl border-2 border-white/20 backdrop-blur-sm animate-pulse">
              <div className="flex items-center space-x-2">
                <div className="w-2 h-2 bg-white rounded-full animate-ping"></div>
                <span className="font-bold text-sm">üéÅ Ho√†n to√†n mi·ªÖn ph√≠!</span>
              </div>
            </div>
            <div className="px-4 py-2 bg-gradient-to-r from-blue-500 to-indigo-500 text-white rounded-xl text-sm font-medium shadow-lg">
              <span>üéì {userAge ? `ƒê·ªô tu·ªïi: ${userAge}` : "ƒêang t·∫£i..."}</span>
            </div>
          </div>
        </div>

        {/* Hero Section */}
        <div className="text-center mb-12">
          <div className="inline-flex items-center space-x-3 px-8 py-4 bg-gradient-to-r from-red-500 via-pink-500 to-purple-500 text-white rounded-full shadow-2xl mb-6 transform hover:scale-105 transition-transform duration-300">
            <Shield className="w-7 h-7" />
            <span className="font-bold text-xl">H·ªó tr·ª£ Ph√≤ng ch·ªëng Ma t√∫y</span>
          </div>
          <h1 className="text-5xl font-extrabold bg-gradient-to-r from-gray-800 via-blue-800 to-indigo-800 bg-clip-text text-transparent mb-6 leading-tight">
            Kh√≥a h·ªçc Ph√≤ng ch·ªëng Ma t√∫y
          </h1>
          <p className="text-xl text-gray-600 max-w-4xl mx-auto leading-relaxed mb-6">
            C√πng trang b·ªã ki·∫øn th·ª©c ph√≤ng ch·ªëng ma t√∫y, b·∫£o v·ªá b·∫£n th√¢n v√† c·ªông ƒë·ªìng. M·ªói kh√≥a h·ªçc bao g·ªìm video b√†i
            gi·∫£ng th·ª±c t·∫ø, b·∫°n c√≥ th·ªÉ h·ªçc theo t·ªëc ƒë·ªô ri√™ng.
          </p>
          <div className="inline-flex items-center space-x-2 px-6 py-3 bg-amber-50 border-2 border-amber-200 rounded-2xl shadow-lg">
            <div className="w-2 h-2 bg-amber-400 rounded-full animate-pulse"></div>
            <span className="text-amber-700 font-medium">
              üìπ M·ªói b√†i h·ªçc l√† video th·ª±c t·∫ø - H·ªçc xong l√† ho√†n th√†nh!
            </span>
          </div>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-12">
          <div className="bg-white/90 backdrop-blur-sm p-6 rounded-2xl shadow-xl border-2 border-emerald-100 hover:border-emerald-300 transition-all duration-300 transform hover:-translate-y-1">
            <div className="flex items-center space-x-4">
              <div className="p-3 bg-gradient-to-r from-emerald-400 to-green-400 rounded-xl shadow-lg">
                <Users className="w-8 h-8 text-white" />
              </div>
              <div>
                <p className="text-3xl font-bold text-gray-800">{purchasedCourses.length}</p>
                <p className="text-gray-600 font-medium">Kh√≥a h·ªçc c·ªßa t√¥i</p>
              </div>
            </div>
          </div>
          <div className="bg-white/90 backdrop-blur-sm p-6 rounded-2xl shadow-xl border-2 border-blue-100 hover:border-blue-300 transition-all duration-300 transform hover:-translate-y-1">
            <div className="flex items-center space-x-4">
              <div className="p-3 bg-gradient-to-r from-blue-400 to-indigo-400 rounded-xl shadow-lg">
                <BookOpen className="w-8 h-8 text-white" />
              </div>
              <div>
                <p className="text-3xl font-bold text-gray-800">{allCourses.length}</p>
                <p className="text-gray-600 font-medium">Kh√≥a h·ªçc c√≥ s·∫µn</p>
              </div>
            </div>
          </div>
          <div className="bg-white/90 backdrop-blur-sm p-6 rounded-2xl shadow-xl border-2 border-purple-100 hover:border-purple-300 transition-all duration-300 transform hover:-translate-y-1">
            <div className="flex items-center space-x-4">
              <div className="p-3 bg-gradient-to-r from-purple-400 to-pink-400 rounded-xl shadow-lg">
                <PlayCircle className="w-8 h-8 text-white" />
              </div>
              <div>
                <p className="text-3xl font-bold text-gray-800">Video</p>
                <p className="text-gray-600 font-medium">B√†i gi·∫£ng tr·ª±c quan</p>
              </div>
            </div>
          </div>
          <div className="bg-white/90 backdrop-blur-sm p-6 rounded-2xl shadow-xl border-2 border-cyan-100 hover:border-cyan-300 transition-all duration-300 transform hover:-translate-y-1">
            <div className="flex items-center space-x-4">
              <div className="p-3 bg-gradient-to-r from-cyan-400 to-blue-400 rounded-xl shadow-lg">
                <Target className="w-8 h-8 text-white" />
              </div>
              <div>
                <p className="text-3xl font-bold text-gray-800">100%</p>
                <p className="text-gray-600 font-medium">Cam k·∫øt ch·∫•t l∆∞·ª£ng</p>
              </div>
            </div>
          </div>
        </div>

        {/* Purchased Courses Section */}
        <section className="bg-white/95 backdrop-blur-sm p-8 rounded-3xl shadow-2xl border-2 border-emerald-100 mb-12">
          <div className="flex items-center space-x-4 mb-8">
            <div className="p-4 bg-gradient-to-r from-emerald-500 to-green-500 rounded-2xl shadow-xl">
              <ShieldCheck className="w-10 h-10 text-white" />
            </div>
            <div>
              <h2 className="text-4xl font-bold text-gray-800">Kh√≥a h·ªçc c·ªßa t√¥i</h2>
              <p className="text-gray-600 text-lg">Ti·∫øp t·ª•c h√†nh tr√¨nh h·ªçc t·∫≠p c·ªßa b·∫°n</p>
            </div>
          </div>

          {purchasedCourses.length > 0 ? (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              {purchasedCourses.map((course) => (
                <div
                  key={course.id}
                  className="group relative bg-gradient-to-br from-emerald-50 via-green-50 to-teal-50 p-8 rounded-3xl border-3 border-emerald-200 hover:border-emerald-400 transition-all duration-500 shadow-xl hover:shadow-2xl transform hover:-translate-y-2"
                >
                  <div className="absolute top-6 right-6">{getStatusIcon(course.status)}</div>
                  <div className="absolute -top-3 -left-3 w-6 h-6 bg-gradient-to-r from-emerald-400 to-green-400 rounded-full shadow-lg animate-pulse"></div>
                  <div className="flex items-start space-x-6">
                    <div className="p-4 bg-gradient-to-r from-emerald-400 to-green-400 rounded-2xl shadow-lg">
                      <BookOpen className="w-8 h-8 text-white" />
                    </div>
                    <div className="flex-1">
                      <h3 className="font-bold text-2xl text-gray-800 mb-3">{course.name}</h3>
                      <div className="flex items-center space-x-3 mb-4">
                        <span
                          className={`px-4 py-2 rounded-full text-sm font-bold shadow-md ${
                            course.status === "CONFIRMED"
                              ? "bg-green-100 text-green-700 border-2 border-green-200"
                              : course.status === "FREE"
                                ? "bg-emerald-100 text-emerald-700 border-2 border-emerald-200"
                                : "bg-yellow-100 text-yellow-700 border-2 border-yellow-200"
                          }`}
                        >
                          {course.status === "FREE" ? "Mi·ªÖn ph√≠" : course.status}
                        </span>
                        {(course.status === "CONFIRMED" || course.status === "FREE") && (
                          <span className="px-3 py-1 bg-blue-100 text-blue-700 rounded-full text-sm font-medium">
                            üìπ Video s·∫µn s√†ng
                          </span>
                        )}
                      </div>
                      <div className="flex items-center justify-between">
                        {(course.progress === "Ch∆∞a b·∫Øt ƒë·∫ßu" || course.status === "FREE") && (
                          <button
                            onClick={() => handleStartLearning(course.id)}
                            className="group flex items-center space-x-2 px-6 py-3 bg-gradient-to-r from-emerald-500 to-green-500 text-white rounded-2xl hover:from-emerald-600 hover:to-green-600 transition-all duration-300 shadow-xl hover:shadow-2xl transform hover:scale-105"
                          >
                            <PlayCircle className="w-5 h-5" />
                            <span className="font-semibold">B·∫Øt ƒë·∫ßu h·ªçc</span>
                          </button>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-16">
              <EmptyStateIllustration />
              <h3 className="text-2xl font-bold text-gray-700 mb-4 mt-8">B·∫°n ch∆∞a ƒëƒÉng k√Ω kh√≥a h·ªçc n√†o</h3>
              <p className="text-gray-500 text-lg mb-8 max-w-2xl mx-auto">
                H√£y kh√°m ph√° c√°c kh√≥a h·ªçc ph√≤ng ch·ªëng ma t√∫y ƒë·ªÉ b·∫Øt ƒë·∫ßu h√†nh tr√¨nh h·ªçc t·∫≠p c·ªßa b·∫°n.
              </p>
              <button
                onClick={() => document.getElementById("all-courses").scrollIntoView({ behavior: "smooth" })}
                className="inline-flex items-center space-x-2 px-8 py-4 bg-gradient-to-r from-blue-500 to-indigo-500 text-white rounded-2xl hover:from-blue-600 hover:to-indigo-600 transition-all duration-300 shadow-xl hover:shadow-2xl transform hover:scale-105 font-semibold"
              >
                <TrendingUp className="w-5 h-5" />
                <span>Kh√°m ph√° kh√≥a h·ªçc ngay</span>
              </button>
            </div>
          )}
        </section>

        {/* All Courses Section */}
        <section
          id="all-courses"
          className="bg-white/95 backdrop-blur-sm p-8 rounded-3xl shadow-2xl border-2 border-blue-100"
        >
          <div className="flex items-center space-x-4 mb-8">
            <div className="p-4 bg-gradient-to-r from-blue-500 to-indigo-500 rounded-2xl shadow-xl">
              <Heart className="w-10 h-10 text-white" />
            </div>
            <div>
              <h2 className="text-4xl font-bold text-gray-800">Kh√≥a h·ªçc Ph√≤ng ch·ªëng Ma t√∫y</h2>
              <p className="text-gray-600 text-lg">Kh√°m ph√° ki·∫øn th·ª©c b·∫£o v·ªá b·∫£n th√¢n v√† c·ªông ƒë·ªìng qua video th·ª±c t·∫ø</p>
            </div>
          </div>

          {/* Search and Filters */}
          <div className="bg-gradient-to-r from-gray-50 to-blue-50 p-6 rounded-2xl mb-8 border-2 border-gray-200 shadow-lg">
            <div className="grid grid-cols-1 lg:grid-cols-4 gap-4">
              <div className="lg:col-span-3 relative">
                <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                  <Search className="h-6 w-6 text-gray-400" />
                </div>
                <input
                  type="text"
                  value={search}
                  onChange={(e) => setSearch(e.target.value)}
                  placeholder="T√¨m ki·∫øm kh√≥a h·ªçc ph√≤ng ch·ªëng ma t√∫y..."
                  className="w-full pl-12 pr-4 py-4 border-2 border-gray-300 rounded-2xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all placeholder-gray-400 text-lg font-medium shadow-lg bg-white"
                />
              </div>
              <select
                value={filterPrice}
                onChange={(e) => setFilterPrice(e.target.value)}
                className="px-4 py-4 border-2 border-gray-300 rounded-2xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all font-medium shadow-lg bg-white"
              >
                <option value="all">üí∞ T·∫•t c·∫£ m·ª©c gi√°</option>
                <option value="free">üÜì Mi·ªÖn ph√≠</option>
                <option value="paid">üí≥ Tr·∫£ ph√≠</option>
              </select>
            </div>
          </div>

          {/* Course Results */}
          {filteredAllCourses.length > 0 ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
              {filteredAllCourses.map((course) => {
                const isPurchased = purchasedCourses.some((p) => p.id === course.id)
                return (
                  <div
                    key={course.id}
                    className="group relative bg-gradient-to-br from-white via-gray-50 to-blue-50 p-8 rounded-3xl border-3 border-gray-200 hover:border-blue-400 transition-all duration-500 shadow-xl hover:shadow-2xl transform hover:-translate-y-3 hover:rotate-1"
                  >
                    <div className="absolute top-6 right-6">
                      <button className="p-2 bg-white/80 backdrop-blur-sm rounded-full shadow-lg hover:shadow-xl transition-all duration-300 group-hover:scale-110 border border-gray-200 hover:border-red-300">
                        <Bookmark className="w-5 h-5 text-gray-400 hover:text-red-400 transition-colors" />
                      </button>
                    </div>
                    <div className="relative mb-6">
                      <div className="aspect-video bg-gradient-to-br from-blue-400 via-indigo-500 to-purple-600 rounded-2xl shadow-xl overflow-hidden">
                        <div className="w-full h-full flex items-center justify-center relative">
                          <PlayCircle className="w-16 h-16 text-white/90 animate-pulse" />
                          <div className="absolute inset-0 bg-gradient-to-r from-black/20 via-transparent to-black/20"></div>
                          <div className="absolute bottom-4 left-4 px-3 py-1 bg-white/90 backdrop-blur-sm rounded-xl text-sm font-bold text-gray-700">
                            üìπ Video th·ª±c t·∫ø
                          </div>
                        </div>
                      </div>
                    </div>
                    <div className="space-y-4">
                      <h3 className="font-bold text-2xl text-gray-800 line-clamp-2 group-hover:text-blue-600 transition-colors leading-tight">
                        {course.name}
                      </h3>
                      <p className="text-gray-600 line-clamp-3 leading-relaxed">
                        {course.description ||
                          "Kh√≥a h·ªçc cung c·∫•p ki·∫øn th·ª©c c·∫ßn thi·∫øt v·ªÅ ph√≤ng ch·ªëng ma t√∫y th√¥ng qua c√°c video b√†i gi·∫£ng th·ª±c t·∫ø, gi√∫p b·∫°n hi·ªÉu r√µ h∆°n v·ªÅ t√°c h·∫°i v√† c√°ch b·∫£o v·ªá b·∫£n th√¢n."}
                      </p>
                      <div className="flex flex-wrap gap-2">
                        <span className="px-3 py-1 bg-green-100 text-green-700 rounded-full text-sm font-medium border border-green-200">
                          üé• Video HD
                        </span>
                        <span className="px-3 py-1 bg-blue-100 text-blue-700 rounded-full text-sm font-medium border border-blue-200">
                          ‚è±Ô∏è T·ª± h·ªçc
                        </span>
                        <span className="px-3 py-1 bg-purple-100 text-purple-700 rounded-full text-sm font-medium border border-purple-200">
                          üèÜ Ch·ª©ng ch·ªâ
                        </span>
                      </div>
                      <div className="flex items-center justify-between pt-4 border-t-2 border-gray-100">
                        <div className="text-center">
                          {course.price === 0 ? (
                            <span className="text-2xl font-bold text-green-600">üÜì Mi·ªÖn ph√≠</span>
                          ) : (
                            <div>
                              <span className="text-2xl font-bold text-blue-600">
                                {course.price.toLocaleString("vi-VN")}‚Ç´
                              </span>
                              <p className="text-sm text-gray-500">M·ªôt l·∫ßn thanh to√°n</p>
                            </div>
                          )}
                        </div>
                        <div className="text-right">
                          {isPurchased ? (
                            <div className="flex flex-col items-end space-y-2">
                              <span className="flex items-center space-x-2 px-4 py-2 bg-green-100 text-green-700 rounded-xl font-semibold border-2 border-green-200">
                                <CheckCircle className="w-4 h-4" />
                                <span>ƒê√£ s·ªü h·ªØu</span>
                              </span>
                              <button
                                onClick={() => handleStartLearning(course.id)}
                                className="flex items-center space-x-2 px-4 py-2 bg-gradient-to-r from-blue-500 to-indigo-500 text-white rounded-xl hover:from-blue-600 hover:to-indigo-600 transition-all duration-300 shadow-lg hover:shadow-xl font-semibold"
                              >
                                <PlayCircle className="w-4 h-4" />
                                <span>Xem video</span>
                              </button>
                            </div>
                          ) : (
                            <button
                              onClick={() => handlePurchase(course.id)}
                              disabled={loading}
                              className="flex items-center space-x-2 px-6 py-3 bg-gradient-to-r from-emerald-500 to-green-500 text-white rounded-xl hover:from-emerald-600 hover:to-green-600 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed font-semibold"
                            >
                              {loading ? (
                                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                              ) : (
                                <Heart className="w-4 h-4" />
                              )}
                              <span>
                                {loading ? "ƒêang x·ª≠ l√Ω..." : course.price === 0 ? "ƒêƒÉng k√Ω mi·ªÖn ph√≠" : "ƒêƒÉng k√Ω ngay"}
                              </span>
                            </button>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                )
              })}
            </div>
          ) : (
            <div className="text-center py-16">
              <div className="w-48 h-48 mx-auto mb-8 bg-gradient-to-br from-gray-100 via-slate-100 to-zinc-100 rounded-full flex items-center justify-center shadow-xl">
                <Search className="w-20 h-20 text-gray-400" />
              </div>
              <h3 className="text-2xl font-bold text-gray-700 mb-4">
                {search ? `Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc ph√π h·ª£p v·ªõi t·ª´ kh√≥a "${search}"` : "Ch∆∞a c√≥ kh√≥a h·ªçc n√†o"}
              </h3>
              <p className="text-gray-500 text-lg mb-8 max-w-2xl mx-auto">
                {search
                  ? "H√£y th·ª≠ t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a kh√°c ho·∫∑c xem t·∫•t c·∫£ kh√≥a h·ªçc c√≥ s·∫µn."
                  : "Hi·ªán t·∫°i ch∆∞a c√≥ kh√≥a h·ªçc n√†o ph√π h·ª£p v·ªõi ƒë·ªô tu·ªïi c·ªßa b·∫°n."}
              </p>
              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <button
                  onClick={() => setSearch("")}
                  className="inline-flex items-center space-x-2 px-8 py-4 bg-gradient-to-r from-blue-500 to-indigo-500 text-white rounded-2xl hover:from-blue-600 hover:to-indigo-600 transition-all duration-300 shadow-xl hover:shadow-2xl transform hover:scale-105 font-semibold"
                >
                  <BookOpen className="w-5 h-5" />
                  <span>Xem t·∫•t c·∫£ kh√≥a h·ªçc</span>
                </button>
                <button
                  onClick={() => {
                    setFilterPrice("free")
                    setSearch("")
                  }}
                  className="inline-flex items-center space-x-2 px-8 py-4 bg-gradient-to-r from-emerald-500 to-green-500 text-white rounded-2xl hover:from-emerald-600 hover:to-green-600 transition-all duration-300 shadow-xl hover:shadow-2xl transform hover:scale-105 font-semibold"
                >
                  <Heart className="w-5 h-5" />
                  <span>Kh√≥a h·ªçc mi·ªÖn ph√≠</span>
                </button>
              </div>
            </div>
          )}
        </section>
      </div>
    </div>
  )
}

export default UserCourses
